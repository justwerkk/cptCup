Player Rankings: <%= @player_rankings %>
<br /><br />
Game Hash: <%= @game_hash %>
<br /><br />

<% content_for :head do %>
<style>
  body {
    font-family: Baskerville, "Times New Roman", serif;
  }
  #svg-container {
    margin-top: 2em;
  }
  .bar:hover,
  .player-names:hover {
    cursor: pointer;
  }
</style>
<% end %>

<div class="controls">
  <label> Player:
    <select id="player-selector">
      <option value="all">--</option>
      <% @players_hash.sort_by { |id, name| name.downcase }.each do |k,v| %>
      <option value="<%= k %>"><%= v %></option>
      <% end %>
    </select>
  </label>
  <label> Sort By:
    <select id="sort-type">
      <option value="ranking">Ranking</option>
      <option value="plusminus">Plus/Minus</option>
      <option value="games">Most Games</option>
      <option value="wins">Most Wins</option>
      <option value="losses">Most Losses</option>
      <option value="winLoss">Win/Loss Ratio</option>
      <option value="domination">Domination</option>
      <option value="pwned">Pwned</option>
      <option value="shots">Shot Percentage</option>
    </select>
  </label>
</div>

<svg id="svg-container"></svg>

<% content_for :script do %>
<%= javascript_include_tag('d3/d3.js') %>
<script>
  var VsPlayer = function(id, wins, losses, shotsHit, shotsMissed) {
    this.id = id;
    this.wins = wins;
    this.losses = losses;
    this.totalGames = this.wins + this.losses
    this.plusMinus = this.wins - this.losses;
    this.winRatio = this.wins / this.totalGames;

    this.shotsHit = shotsHit;
    this.shotsMissed = shotsMissed;
    this.totalShots = this.shotsHit + this.shotsMissed;
    if (this.totalShots == 0) {
      this.shotPercentage = 0;
    } else {
      this.shotPercentage = this.shotsHit / this.totalShots;
    }
  }
  var Player = function(id, records) {
    this.id = id;
    this.records = records;
    this.versusArray = [];
    this.wins = 0;
    this.losses = 0;
    this.shotsHit = 0;
    this.shotsMissed = 0;
    this.score = 1200;
    var self = this;
    this.numGames = function() {
      return self.versusArray.length;
    }
    this.setRankingScore = function(s) {
      this.score = s;
    }
    var addVersus = function(vsPlayer) {
      self.versusArray.push(vsPlayer);
    }
    var initializeVersus = function() {
      $.each(self.records, function(i, idWinLossArr) {
        var vs = new VsPlayer(idWinLossArr[0], idWinLossArr[1][0], idWinLossArr[1][1], idWinLossArr[1][2], idWinLossArr[1][3]);
        addVersus(vs);
        self.wins += vs.wins;
        self.losses += vs.losses;
        self.shotsHit += vs.shotsHit;
        self.shotsMissed += vs.shotsMissed;
      });
    }
    initializeVersus();
    // each game has 2 opponents
    this.wins /= 2;
    this.losses /= 2;
    this.totalGames = this.wins + this.losses;
    this.plusMinus = this.wins - this.losses;
    this.winRatio = this.wins / this.totalGames;

    this.shotsHit /= 2;
    this.shotsMissed /= 2;
    this.totalShots = this.shotsHit + this.shotsMissed;
    if (this.totalShots == 0) {
      this.shotPercentage = 0;
    } else {
      this.shotPercentage = this.shotsHit / this.totalShots;
    }
  }
  var chart = {
    w: 500,
    h: 1200,
    nameGap: 100,
    unitWidth: 20,
    barStart: function() { return this.nameGap },
    em: function(units) { return units * 13; }
  }
  var rankings = <%= @player_rankings.to_json.html_safe %>;
  var namesHash = <%= @players_hash.to_json.html_safe %>;
  var data = <%= @game_hash.to_json.html_safe %>;
  var dataRecords = {};
  $.each(data, function(k, v) {
    dataRecords[k] = new Player(k, v);
  });
  $.each(rankings, function(k, v) {
    dataRecords[k].setRankingScore(v);
  });

  var x = d3.scale.linear()
    .domain([0, 1])
    .range([0, chart.w]);
  var y = d3.scale.linear()
    .domain([0, 100])
    .rangeRound([0, chart.h]);

  var svg = d3.select('svg')
    .attr('width', chart.w)
    .attr('height', chart.h);

  $("#player-selector").change(function() {
    var id = $(this).find(":selected").val();
    var type = $("#sort-type").val();
    if (id != "all" && type == "ranking") {
      $("#sort-type").val("plusminus");
      type = "plusminus";
    }
    drawComparisons($(this).find(":selected").val(), $('#sort-type').val());
  }).val("all");

  $("#sort-type").change(function() {
    var id = $("#player-selector").find(":selected").val();
    var type = $(this).val();
    if (type == "ranking") {
      $("#player-selector").val('all');
      id = "all"
    }
    drawComparisons(id, type);
  });

  function getPlayerData(playerId) {
    if (isNaN(playerId)) {
      return $.map(dataRecords, function (value, key) { return value; });;
    } else {
      return dataRecords[playerId].versusArray;
    }
  }

  function drawComparisons(playerId, sortType) {
    var dataPoints = transformData(getPlayerData(playerId), sortType);
    drawBars(dataPoints, sortType);
    drawNamesLabel(dataPoints);
    drawBarLabel(dataPoints, sortType);
    drawAgainstLabel(dataPoints, sortType);
  }

  function transformData(data, sortType) {
    var data = data.sort(function(p1, p2) {
      switch(sortType) {
        case "ranking":
          return d3.descending(p1.score, p2.score);
        case "plusminus":
          return d3.descending(p1.plusMinus, p2.plusMinus);
        case "games":
          return d3.descending(p1.totalGames, p2.totalGames);
        case "wins":
          return d3.descending(p1.wins, p2.wins);
        case "losses":
          return d3.descending(p1.losses, p2.losses);
        case "winLoss":
        case "domination":
          if (p1.winRatio == p2.winRatio) {
            if (p1.plusMinus == p2.plusMinus) {
              return d3.descending(p1.wins, p2.wins);
            } else {
              return d3.descending(p1.plusMinus, p2.plusMinus);
            }
          } else {
            return d3.descending(p1.winRatio, p2.winRatio);
          }
        case "pwned":
        if (p1.winRatio == p2.winRatio) {
          if (p1.plusMinus == p2.plusMinus) {
            return d3.descending(p2.wins, p1.wins);
          } else {
            return d3.descending(p2.plusMinus, p1.plusMinus);
          }
        } else {
          return d3.descending(p2.winRatio, p1.winRatio);
        }
        case "shots":
          return d3.descending(p1.shotPercentage, p2.shotPercentage);
      }
    });

    if (sortType == "domination") {
      data = data.filter(function(vsPlayer) {
        return vsPlayer.winRatio >= 0.75 && vsPlayer.totalGames >= 2;
      });
    } else if (sortType == "pwned") {
      data = data.filter(function(vsPlayer) {
        return vsPlayer.winRatio <= 0.25 && vsPlayer.totalGames >= 2;
      });
    }

    return data;
  }

  function drawBars(data, sortType) {
    var bars = svg.selectAll('rect')
      .data(data)
      .on('click', function(d) { $('#player-selector').val(d.id).change(); });
    bars.enter().append('rect');
    bars.transition().duration(1000)
      .attr('class', "bar")
      .attr('x', function(d) { return chart.barStart(); })
      .attr('fill', function(d) {
        switch(sortType) {
          case "plusminus":
            if (d.plusMinus > 0) {
              return "rgb(0, " + (Math.abs(d.plusMinus) * 50) + ", 0)";
            } else {
              return "rgb(" + (Math.abs(d.plusMinus) * 50) + ", 0, 0)";
            }
          case "ranking":
          case "winLoss":
          case "games":
          case "domination":
          case "pwned":
            return "#000";
          case "wins":
          case "losses":
            if (barWidth(d, sortType) > 1 && sortType != "losses") {
              return "rgb(0, " + (barWidth(d, sortType) * 20) + ", 0)";
            } else {
              return "rgb(" + (barWidth(d, sortType) * 20) + ", 0, 0)";
            }
        }
      })
      .attr('y', function(d, i) { return i * chart.unitWidth; })
      .attr('width', function(d) { return barWidth(d, sortType) * chart.em(2); })
      .attr('height', 15);
    bars.exit().remove();
  }

  function drawNamesLabel(data) {
    var label = svg.selectAll('.player-names')
      .data(data)
      .on('click', function(d) { $('#player-selector').val(d.id).change(); });
    label.enter().append("text");
    label.transition().duration(1000)
      .attr('class', "player-names")
      .attr('x', function(d) { return chart.barStart() - chart.em(1); })
      .attr('y', textYCoord)
      .attr("text-anchor", "end")
      .text(function(d) { return namesHash[d.id]; });
    label.exit().remove();
  }

  function drawBarLabel(data, sortType) {
    var label = svg.selectAll('.plus-minus')
      .data(data)
    label.enter().append("text");
    label.transition().duration(1000)
      .attr('class', 'plus-minus')
      .attr('x', function(d) { return chart.barStart() + 5; })
      .attr('fill', function(d) { return sortType == "ranking" ? "#000" : "#fff"; })
      .attr('y', textYCoord)
      .text(function(d) {
        switch(sortType) {
          case "ranking":
            return d.score.toFixed(2);
          case "plusminus":
            return (d.plusMinus > 0 ? "+" : "") + d.plusMinus;
          case "games":
            return d.totalGames;
          case "winLoss":
          case "domination":
          case "pwned":
            return d.winRatio.toFixed(3);
          case "wins":
            return d.wins;
          case "losses":
            return d.losses;
          case "shots":
            return d.shotPercentage.toFixed(3);
        }
      });
    label.exit().remove();
  }

  function drawAgainstLabel(data, sortType) {
    var label = svg.selectAll('.against-label')
      .data(data)
    label.enter().append("text");
    label.transition().duration(1000)
      .attr('class', 'against-label')
      .attr('x', function(d) { return chart.barStart() + barWidth(d, sortType) * chart.em(2) + 5; })
      .attr('y', textYCoord)
      .text(function(d) {
        switch(sortType) {
          case "ranking":
            return "";
          default:
            return "W-L " + d.wins + "-" + d.losses;
        }
      });
    label.exit().remove();
  }

  function barWidth(player, sortType) {
    switch(sortType) {
      case "ranking":
        return 0;
      case "plusminus":
        return Math.max(player.plusMinus, 0) + 1;
      case "games":
        return player.totalGames / 10;
      case "wins":
        return player.wins / 10 ;
      case "losses":
        return player.losses / 10;
      case "winLoss":
        return (player.winRatio * 10) + 1;
      case "shots":
        return (player.shotPercentage * 10) + 1;
      case "domination":
      case "pwned":
    }   return 5;
  }

  function textYCoord(d, i) {
    return (i * chart.unitWidth) + chart.em(1);
  }

  drawComparisons('all', "ranking");
</script>
<% end %>
