<% content_for :head do %>
<style>
  body {
    font-family: Baskerville, "Times New Roman", serif;
  }
  #player-selector {
    position: fixed;
  }
</style>
<% end %>

<select id="player-selector">
  <% @players_hash.sort_by { |id, name| name.downcase }.each do |k,v| %>
  <option value="<%= k %>"><%= v %></option>
  <% end %>
</select>
<svg class="svg-container"></svg>

<% content_for :script do %>
<script src="http://d3js.org/d3.v2.min.js"></script>
<script>
  var chart = {
    w: 400,
    h: 900,
    nameGap: 100,
    nameLeftPos: function() { return this.w/2 + this.nameGap/2 },
    nameRightPos: function() { return this.w/2 - this.nameGap/2 }
  }
  var namesHash = <%= @players_hash.to_json.html_safe %>;
  var data = <%= @game_hash.to_json.html_safe %>;

  var x = d3.scale.linear()
    .domain([0, 1])
    .range([0, chart.w]);
  var y = d3.scale.linear()
    .domain([0, 100])
    .rangeRound([0, chart.h]);

  var svg = d3.select('svg')
    .attr('width', chart.w)
    .attr('height', chart.h);

  $("#player-selector").change(function() {
    drawComparisons(data[$(this).find(":selected").val()]);
  }).val("1");

  drawComparisons(data['1']);

  function drawComparisons(dataPoints) {
    dataPoints = dataPoints.sort(function(a, b) {
      return d3.descending(a[1][0]-a[1][1], b[1][0]-b[1][1]);
    });
    var bars = svg.selectAll('rect')
      .data(dataPoints);
    bars.enter().append('rect');
    bars.transition().duration(1000)
      .attr('x', function(d) {
        if (d[1][0]-d[1][1] > 0) {
          return chart.nameLeftPos();
        } else {
          return chart.nameRightPos() + (d[1][0]-d[1][1]) * 20;
        }
      })
      .attr('fill', function(d) {
        if (d[1][0]-d[1][1] > 0) {
          return "rgb(0, " + (Math.abs(d[1][0]-d[1][1]) * 50) + ", 0)";
        } else {
          return "rgb(" + (Math.abs(d[1][0]-d[1][1]) * 50) + ", 0, 0)";
        }
      })
      .attr('y', function(d, i) { return i * 20; })
      .attr('width', function(d) { return Math.abs(d[1][0]-d[1][1])*20; })
      .attr('height', 15);
    bars.exit().remove();

    var text = svg.selectAll('text')
      .data(dataPoints)
    text.enter().append("text");
    text.transition().duration(1000)
      .attr('x', function(d) { return chart.w/2; })
      .attr('y', function(d, i) { return (i * 20) + 13; })
      .attr("text-anchor", "middle")
      .text(function(d) {
        return namesHash[d[0]];
      });
    text.exit().remove();

    var winLoss = svg.selectAll('winLossText')
      .data(dataPoints)
    winLoss.enter().append("text");
    winLoss.transition().duration(1000)
      .attr('x', function(d) {
        if (d[1][0]-d[1][1] > 0) {
          return chart.nameLeftPos() - 10;
        } else {
          return chart.nameRightPos() + 10;
        }
      })
      .attr('y', function(d, i) { return (i * 20) + 13; })
      .attr("text-anchor", "middle")
      .text(function(d) {
        return ((d[1][0]-d[1][1]) > 0 ? "+" : "") + (d[1][0]-d[1][1]);
      });
    winLoss.exit().remove();

    var record = svg.selectAll('recordText')
      .data(dataPoints)
    record.enter().append("text");
    record.transition().duration(1000)
      .attr('x', function(d) {
        var xPos;
        if (d[1][0]-d[1][1] > 0) {
          xPos = chart.nameLeftPos();
        } else {
          xPos = chart.nameRightPos() + (d[1][0]-d[1][1]) * 20;
        }
        return xPos + Math.abs(d[1][0]-d[1][1])*20;
      })
      .attr('y', function(d, i) { return (i * 20) + 13; })
      .text(function(d) {
        return "W-L " + d[1][0] + "-" + d[1][1];
      });
    record.exit().remove();
  }
</script>
<% end %>