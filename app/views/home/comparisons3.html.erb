<% content_for :head do %>
<style>
  body {
    font-family: Baskerville, "Times New Roman", serif;
  }
  .controls {
    position: fixed;
  }
  #svg-container {
    margin-top: 2em;
  }
</style>
<% end %>

<div class="controls">
  <select id="player-selector">
    <option value="all">--</option>
    <% @players_hash.sort_by { |id, name| name.downcase }.each do |k,v| %>
    <option value="<%= k %>"><%= v %></option>
    <% end %>
  </select>
  <select id="sort-type">
    <option value="plusminus">Plus/Minus</option>
    <option value="games">Most Games</option>
    <option value="wins">Most Wins</option>
    <option value="losses">Most Losses</option>
    <option value="winLoss">Win/Loss Ratio</option>
    <option value="domination">Domination</option>
    <option value="pwned">Pwned</option>
  </select>
</div>
<svg id="svg-container"></svg>

<% content_for :script do %>
<script src="http://d3js.org/d3.v2.min.js"></script>
<script>
  var VsPlayer = function(id, wins, losses) {
    this.id = id;
    this.wins = wins;
    this.losses = losses;
    this.totalGames = this.wins + this.losses
    this.plusMinus = this.wins - this.losses;
    this.winRatio = this.wins / this.totalGames;
  }
  var Player = function(id, records) {
    this.id = id;
    this.records = records;
    this.versusArray = [];
    this.wins = 0;
    this.losses = 0;
    this.totalGames = 0;
    var self = this;
    this.numGames = function() {
      return self.versusArray.length;
    }
    var addVersus = function(vsPlayer) {
      self.versusArray.push(vsPlayer);
    }
    var initializeVersus = function() {
      $.each(self.records, function(i, idWinLossArr) {
        var vs = new VsPlayer(idWinLossArr[0], idWinLossArr[1][0], idWinLossArr[1][1]);
        addVersus(vs);
        self.wins += vs.wins;
        self.losses += vs.losses;
      });
    }
    initializeVersus();
    // each game has 2 opponents
    this.wins /= 2;
    this.losses /= 2;
    this.totalGames = this.wins + this.losses;
    this.plusMinus = this.wins - this.losses;
    this.winRatio = this.wins / this.totalGames;
  }
  var chart = {
    w: 500,
    h: 1200,
    nameGap: 100,
    unitWidth: 20,
    barStart: function() { return this.nameGap },
    em: function(units) { return units * 13; }
  }
  var namesHash = <%= @players_hash.to_json.html_safe %>;
  var data = <%= @game_hash.to_json.html_safe %>;
  var dataRecords = {};
  $.each(data, function(k, v) {
    dataRecords[k] = new Player(k, v);
  });

  var x = d3.scale.linear()
    .domain([0, 1])
    .range([0, chart.w]);
  var y = d3.scale.linear()
    .domain([0, 100])
    .rangeRound([0, chart.h]);

  var svg = d3.select('svg')
    .attr('width', chart.w)
    .attr('height', chart.h);

  $("#player-selector").change(function() {
    drawComparisons($(this).find(":selected").val(), $('#sort-type').val());
  }).val("1");

  $("#sort-type").change(function() {
    drawComparisons($("#player-selector").find(":selected").val(), $(this).val());
  });

  drawComparisons('all', "plusminus");

  function getPlayerData(playerId) {
    if (isNaN(playerId)) {
      return $.map(dataRecords, function (value, key) { return value; });;
    } else {
      return dataRecords[playerId].versusArray;
    }
  }

  function drawComparisons(playerId, sortType) {
    var dataPoints = transformData(getPlayerData(playerId), sortType);
    drawBars(dataPoints, sortType);
    drawNamesLabel(dataPoints);
    drawPlusMinusLabel(dataPoints, sortType);
    drawAgainstLabel(dataPoints, sortType);
  }

  function transformData(data, sortType) {
    var data = data.sort(function(vsPlayerA, vsPlayerB) {
      switch(sortType) {
        case "plusminus":
          return d3.descending(vsPlayerA.plusMinus, vsPlayerB.plusMinus);
        case "games":
          return d3.descending(vsPlayerA.totalGames, vsPlayerB.totalGames);
        case "wins":
          return d3.descending(vsPlayerA.wins, vsPlayerB.wins);
        case "losses":
          return d3.descending(vsPlayerA.losses, vsPlayerB.losses);
        case "winLoss":
        case "domination":
          if (vsPlayerA.winRatio == vsPlayerB.winRatio) {
            if (vsPlayerA.plusMinus == vsPlayerB.plusMinus) {
              return d3.descending(vsPlayerA.wins, vsPlayerB.wins);
            } else {
              return d3.descending(vsPlayerA.plusMinus, vsPlayerB.plusMinus);
            }
          } else {
            return d3.descending(vsPlayerA.winRatio, vsPlayerB.winRatio);
          }
        case "pwned":
        if (vsPlayerA.winRatio == vsPlayerB.winRatio) {
          if (vsPlayerA.plusMinus == vsPlayerB.plusMinus) {
            return d3.descending(vsPlayerB.wins, vsPlayerA.wins);
          } else {
            return d3.descending(vsPlayerB.plusMinus, vsPlayerA.plusMinus);
          }
        } else {
          return d3.descending(vsPlayerB.winRatio, vsPlayerA.winRatio);
        }
      }
    });

    if (sortType == "domination") {
      data = data.filter(function(vsPlayer) {
        return vsPlayer.winRatio >= 0.75 && vsPlayer.totalGames >= 2;
      });
    } else if (sortType == "pwned") {
      data = data.filter(function(vsPlayer) {
        return vsPlayer.winRatio <= 0.25 && vsPlayer.totalGames >= 2;
      });
    }

    return data;
  }

  function drawBars(data, sortType) {
    var bars = svg.selectAll('rect')
      .data(data);
    bars.enter().append('rect');
    bars.transition().duration(1000)
      .attr('class', 'bar')
      .attr('x', function(d) { return chart.barStart(); })
      .attr('fill', function(d) {
        switch(sortType) {
          case "plusminus":
            if (d.plusMinus > 0) {
              return "rgb(0, " + (Math.abs(d.plusMinus) * 50) + ", 0)";
            } else {
              return "rgb(" + (Math.abs(d.plusMinus) * 50) + ", 0, 0)";
            }
          case "games":
          case "domination":
          case "pwned":
            return "#000";
          default:
            if (barWidth(d, sortType) > 1 && sortType != "losses") {
              return "rgb(0, " + (barWidth(d, sortType) * 20) + ", 0)";
            } else {
              return "rgb(" + (barWidth(d, sortType) * 20) + ", 0, 0)";
            }
        }
      })
      .attr('y', function(d, i) { return i * chart.unitWidth; })
      .attr('width', function(d) { return barWidth(d, sortType) * chart.unitWidth; })
      .attr('height', 15);
    bars.exit().remove();
  }

  function drawNamesLabel(data) {
    var label = svg.selectAll('.player-names')
      .data(data)
    label.enter().append("text");
    label.transition().duration(1000)
      .attr('class', 'player-names')
      .attr('x', function(d) { return chart.barStart() - chart.em(1); })
      .attr('y', function(d, i) { return (i * chart.unitWidth) + chart.em(1); })
      .attr("text-anchor", "end")
      .text(function(d) { return namesHash[d.id]; });
    label.exit().remove();
  }

  function drawPlusMinusLabel(data, sortType) {
    var label = svg.selectAll('.plus-minus')
      .data(data)
    label.enter().append("text");
    label.transition().duration(1000)
      .attr('class', 'plus-minus')
      .attr('x', function(d) { return chart.barStart() + 5; })
      .attr('y', function(d, i) { return (i * chart.unitWidth) + chart.em(1); })
      .attr('fill', "#fff")
      .text(function(d) {
        switch(sortType) {
          case "plusminus":
            return (d.plusMinus > 0 ? "+" : "") + d.plusMinus;
          case "games":
            return d.totalGames
          case "winLoss":
          case "domination":
          case "pwned":
            return d.winRatio.toFixed(3);
          default:
            return "";
        }
      });
    label.exit().remove();
  }

  function drawAgainstLabel(data, sortType) {
    var label = svg.selectAll('.against-label')
      .data(data)
    label.enter().append("text");
    label.transition().duration(1000)
      .attr('class', 'against-label')
      .attr('x', function(d) { return chart.barStart() + barWidth(d, sortType) * chart.unitWidth + 5; })
      .attr('y', function(d, i) { return (i * chart.unitWidth) + chart.em(1); })
      .text(function(d) {
        switch(sortType) {
          case "wins":
            return d.wins + " W (" + d.losses + " L)";
          case "losses":
            return d.losses + " L (" + d.wins + " W)";
          default:
            return "W-L " + d.wins + "-" + d.losses;
        }
      });
    label.exit().remove();
  }

  function barWidth(vsPlayer, sortType) {
    switch(sortType) {
      case "plusminus":
        return Math.max(vsPlayer.plusMinus,0) + 1;
      case "games":
        return vsPlayer.totalGames;
      case "wins":
        return vsPlayer.wins + 1;
      case "losses":
        return vsPlayer.losses + 1;
      case "winLoss":
        return (vsPlayer.winRatio * 10) + 3;
      case "domination":
      case "pwned":
    }   return 5;
  }
</script>
<% end %>